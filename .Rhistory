glimpse(NeedstateDayDaypart)
skim(NeedstateDayDaypart)
lapply(NeedstateDayDaypart[c("Year","City","Needstates","NeedstateGroup","Day#Daypart")], unique)
NeedstateDayDaypart <- NeedstateDayDaypart %>%
mutate(`Day#Daypart` = case_when(
`Day#Daypart` == "Before 9 AM"               ~ "05:00–08:59",
`Day#Daypart` == "9 AM - before 11 AM"       ~ "09:00–10:59",
`Day#Daypart` == "11 AM - before 2 PM"       ~ "11:00–13:59",
`Day#Daypart` == "2 PM - before 5 PM"        ~ "14:00–16:59",
`Day#Daypart` == "5 PM - before 9 PM"        ~ "17:00–20:59",
`Day#Daypart` == "9 PM or later"             ~ "21:00–23:59",
TRUE                                         ~ `Day#Daypart`
))
lapply(NeedstateDayDaypart[c("Day#Daypart")], unique)
#View data
SA_var
glimpse(SA_var)
skim(SA_var)
lapply(SA_var[c("Year","Group_size","Age","MPI#Mean","MPI_Mean_Use")], unique)
lapply(SA_var[c("City","TOM","BUMO","BUMO_Previous","MostFavourite","Gender","MPI#detail","Age#group","Age#Group#2","MPI","MPI#2","Occupation","Occupation#group")], unique)
lapply(SA_var[c("TOM","BUMO","BUMO_Previous","MostFavourite")],unique)
SA_var <-SA_var %>%
mutate(`MPI#detail` = case_when(
str_detect(`MPI#detail`, "Under\\s+3") ~ "< 3M",
`MPI#detail` == "Refuse"               ~ "Refuse",
is.na(`MPI#detail`)                    ~ NA,
TRUE ~ str_extract_all(`MPI#detail`, "\\d+\\.?\\d*") %>%
lapply(function(x) paste0(x[1], "M – ", x[2], "M")) %>%
unlist()
))
SA_var <- SA_var %>%
mutate(MPI = case_when(
MPI == "VND 25m+"             ~ "> 25M",
MPI == "Under VND 4.5m"       ~ "< 4.5M",
is.na(MPI)                    ~ NA,
TRUE                          ~ str_extract_all(MPI, "\\d+\\.?\\d*") %>%
lapply(function(x) paste0(x[1], "M – ", x[2], "M")) %>%
unlist()
))
SA_var <- SA_var %>%
mutate(`MPI#2` = case_when(
is.na(`MPI#2`) ~ NA,
TRUE ~ str_extract(`MPI#2`, "^\\d+")
))
SA_var <- SA_var %>%
mutate(Occupation = str_remove(Occupation, "\\s*\\([^\\)]+\\)"))
SA_var <- SA_var %>%
mutate(`Age#Group#2` = case_when(
`Age#Group#2` == "45+ y.o."             ~ "> 45",
is.na(`Age#Group#2`)                    ~ NA,
TRUE                          ~ str_extract_all(`Age#Group#2`, "\\d+") %>%
lapply(function(x) paste0(x[1], " – ", x[2])) %>%
unlist()
))
SA_var <-SA_var %>%
select(-Col)
SA_var <- SA_var %>%
mutate(`MPI#detail` = case_when(
`MPI#detail` == "Refuse" ~ NA,
TRUE                     ~ `MPI#detail`
))
SA_var <- SA_var %>%
kNN(variable = c("MPI#detail", "Age","Group_size"),
k = 9)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tibble)
library(gtExtras)
library(patchwork)
library(gridExtra)
library(skimr)
library(corrplot)
library(ggplot2)
library(grid)
library(VIM)
library(car)
library(readr)
Segmentation2017 <- read_delim("Data/2017Segmentation3685case.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Brand_Image <- read_delim("Data/Brand_Image.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Brand_Health <- read_delim("Data/Brandhealth.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Companion <- read_delim("Data/Companion.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Competitor_Database <- read_delim("Data/Competitor database_xlnm#_FilterDatabase.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
DayofWeek <- read_delim("Data/Dayofweek.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
DayPart <- read_delim("Data/Daypart.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
NeedstateDayDaypart <- read_delim("Data/NeedstateDayDaypart.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
SA_var <- read_delim("Data/SA#var.csv", delim = ";",
escape_double = FALSE, trim_ws = TRUE)
#View data
Segmentation2017
glimpse(Segmentation2017)
skim(Segmentation2017)
summary(Segmentation2017)
#Number of Unexpected Decimal Values
Segmentation2017 %>%
mutate(is_whole_visit = Visit != floor(Visit)) %>%
summarise(
"Count Decimal Visit" = sum(is_whole_visit)
) %>%
pivot_longer(
cols = everything(),
names_to = "Variables",
values_to = "Count"
)
lapply(Segmentation2017[c("Segmentation", "Spending", "Visit","Brand","PPA")], unique)
Segmentation2017 <- Segmentation2017 %>%
extract(Segmentation,
into = c("SegmentCode", "SegmentName", "SpendingRange"),
regex = "(Seg\\.\\d{2}) - (.+) \\((.+)\\)")
Segmentation2017 %>%
mutate(is_duplicated = duplicated(ID)) %>%
summarise(
"Count Duplicated ID" = sum(is_duplicated)
) %>%
pivot_longer(
cols = everything(),
names_to = "ID",
values_to = "Count"
)
Segmentation2017 <- Segmentation2017 %>%
mutate(
Brand = case_when(
Brand == "Indepentdent" ~ "Independent",
TRUE ~ Brand
)
)
#View data
Brand_Image
Brand_Image$Year <- as.factor(Brand_Image$Year)
glimpse(Brand_Image)
skim(Brand_Image)
lapply(Brand_Image[c("Awareness", "BrandImage", "City", "Attribute","Year")], unique)
Brand_Image %>%
mutate(is_duplicated = duplicated(ID)) %>%
summarise(
"Duplicated count" = sum(is_duplicated),
"Row count" = n()
)
lapply(Brand_Image[c("Awareness","BrandImage")],unique)
#View data
Brand_Health
glimpse(Brand_Health)
skim(Brand_Health)
Brand_Health <- Brand_Health %>%
extract(Segmentation,
into = c("SegmentCode", "SegmentName", "SpendingRange"),
regex = "(Seg\\.\\d{2}) - (.+) \\((.+)\\)")
lapply(Brand_Health[c("Year","City","Brand","Spontaneous","Awareness","Brand_Likability","P3M","P1M","Weekly","Daily")], unique)
lapply(Brand_Health[c("Comprehension","SegmentCode","SegmentName","SpendingRange","NPS#P3M#Group","NPS#P3M","Fre#visit")], unique)
Brand_Health <- Brand_Health %>%
mutate(Trial = case_when(
is.na(Trial) ~ "No",
TRUE ~ "Yes"
),
P3M = case_when(
is.na(P3M) ~ "No",
TRUE ~ "Yes"),
P1M = case_when(
is.na(P1M) ~ "No",
TRUE ~ "Yes"))
Brand_Health <- Brand_Health %>%
mutate(Comprehension = case_when(
Comprehension == "Do not know it at all"     ~ "Do not know",
Comprehension == "Maybe do not know it"      ~ "Unsure",
Comprehension == "Know a little"             ~ "Know a little",
Comprehension == "Know it well"              ~ "Know well",
Comprehension == "Know it very well"         ~ "Know very well",
TRUE                                         ~ Comprehension
))
Brand_Health <- Brand_Health %>%
mutate(Weekly =  case_when(
Weekly == Brand ~ "Applicable",
TRUE ~ Weekly
))
Brand_Health <- Brand_Health %>%
mutate(Daily =  case_when(
Daily == Brand ~ "Applicable",
TRUE ~ Daily
))
Brand_Health <- Brand_Health %>%
mutate(
Brand = case_when(
Brand == "Indepedent Cafe" ~ "Independent Cafe",
TRUE ~ Brand
),
Spontaneous = case_when(
Spontaneous == "Indepedent Cafe" ~ "Independent Cafe",
TRUE ~ Spontaneous
),
Awareness = case_when(
Awareness == "Indepedent Cafe" ~ "Independent Cafe",
TRUE ~ Awareness
),
)
# Step 1: Create mapping tables per Brand type
indep_map <- Segmentation2017 %>%
filter(str_to_lower(Brand) == "independent") %>%
select(ID, SegmentCode, Visit, Spending, PPA) %>%
distinct()
street_map <- Segmentation2017 %>%
filter(str_to_lower(Brand) == "street") %>%
select(ID, SegmentCode, Visit, Spending, PPA) %>%
distinct()
chain_map <- Segmentation2017 %>%
filter(str_to_lower(Brand) == "chain") %>%
select(ID, SegmentCode, Visit, Spending, PPA) %>%
distinct()
# Step 2: Join all maps to Brand_Health
Brand_Health <- Brand_Health %>%
left_join(indep_map,  by = "ID", suffix = c("", "_indep")) %>%
left_join(street_map, by = "ID", suffix = c("", "_street")) %>%
left_join(chain_map,  by = "ID", suffix = c("", "_chain")) %>%
mutate(
`Fre#visit` = case_when(
Year == "2017" ~ NA,
TRUE ~ `Fre#visit`)) %>%
mutate(
SegmentCode = case_when(
is.na(SegmentCode) & str_detect(str_to_lower(Brand), "other|independent") ~ SegmentCode_indep,
is.na(SegmentCode) & str_detect(str_to_lower(Brand), "street")            ~ SegmentCode_street,
is.na(SegmentCode)                                                        ~ SegmentCode_chain,
TRUE                                                                      ~ SegmentCode
),
`Fre#visit` = case_when(
is.na(`Fre#visit`) & str_detect(str_to_lower(Brand), "other|independent") ~ Visit,
is.na(`Fre#visit`) & str_detect(str_to_lower(Brand), "street")            ~ Visit_street,
is.na(`Fre#visit`)                                                        ~ Visit_chain,
TRUE                                                                      ~ `Fre#visit`
),
Spending = case_when(
is.na(Spending) & str_detect(str_to_lower(Brand), "other|independent") ~ Spending_indep,
is.na(Spending) & str_detect(str_to_lower(Brand), "street")            ~ Spending_street,
is.na(Spending)                                                        ~ Spending_chain,
TRUE                                                                   ~ Spending
),
PPA = case_when(
is.na(PPA) & str_detect(str_to_lower(Brand), "other|independent") ~ PPA_indep,
is.na(PPA) & str_detect(str_to_lower(Brand), "street")            ~ PPA_street,
is.na(PPA)                                                        ~ PPA_chain,
TRUE                                                              ~ PPA
)
) %>%
select(-ends_with("_indep"), -ends_with("_street"), -ends_with("_chain"), -Visit)
Brand_Health <- Brand_Health %>%
mutate(
Spending_use = case_when(
is.na(Spending_use) ~ Spending,
TRUE ~ Spending_use))
lapply(Brand_Health[c("Brand","Spontaneous","Brand_Likability","Weekly","Daily","Comprehension", "Trial", "P3M", "P1M")], unique)
skim(Brand_Health)
#View data
Companion
glimpse(Companion)
skim(Companion)
lapply(Companion[c("City","Companion#group","Year")], unique)
#View data
Competitor_Database
glimpse(Competitor_Database)
Competitor_Database <- Competitor_Database %>%
rename(`No` = `No#`)
skim(Competitor_Database)
Competitor_Database %>%
mutate(is_duplicated = duplicated(No)) %>%
summarise(
"Duplicated count" = sum(is_duplicated),
"Row count" = n()
)
lapply(Competitor_Database[c("Year","City","Brand","StoreCount")], unique)
#View data
DayofWeek
glimpse(DayofWeek)
skim(DayofWeek)
DayofWeek <- DayofWeek %>%
rename(`DayType` = `Weekday#end`)
lapply(DayofWeek[c("Year","City","Dayofweek","Visit#Dayofweek","DayType")], unique)
DayofWeek <- DayofWeek %>%
mutate(DayType = case_when(
DayType == "#N/A" ~ NA,
TRUE ~ DayType
))
DayofWeek <- DayofWeek %>%
mutate(Dayofweek = case_when(
Dayofweek == "" ~ NA,
TRUE            ~ Dayofweek
))
DayofWeek %>%
mutate(is_na = is.na(Dayofweek)) %>%
group_by(ID) %>%
summarise(
count_na = sum(is_na),
count_id = n()) %>%
filter(count_na > 0)                #Give condition count_na >0)
DayofWeek %>%
mutate(is_na = is.na(Dayofweek)) %>%
group_by(ID) %>%
summarise(
count_na = sum(is_na),
count_id = n()) %>%
filter(count_na > 0 & count_na == count_id) #Condition count_na equal to total appearances of an ID
DayofWeek <- DayofWeek %>%
filter(!is.na(Dayofweek))
#Check median of each Daypart
DayofWeek %>%
group_by(Dayofweek) %>%
summarise(
Median = median(`Visit#Dayofweek`, na.rm = TRUE)
)
#Impute the NA Visit#Daypart by Daypart median
DayofWeek <- DayofWeek %>%
mutate(is_na = is.na(`Visit#Dayofweek`)) %>%
group_by(Dayofweek) %>%
mutate(`Visit#Dayofweek` = if_else(
is.na(`Visit#Dayofweek`),
median(`Visit#Dayofweek`, na.rm = TRUE),
`Visit#Dayofweek`
)) %>%
ungroup()
lapply(DayofWeek[c("Dayofweek","DayType")],unique)
skim(DayofWeek)
#View data
DayPart
glimpse(DayPart)
skim(DayPart)
lapply(DayPart[c("Daypart","City","Visit#Daypart","Year")], unique)
DayPart <- DayPart %>%
mutate(DayPartNumericCode = case_when(
Daypart == "Before 9 AM"               ~ "1",
Daypart == "9 AM - before 11 AM"       ~ "2",
Daypart == "11 AM - before 2 PM"       ~ "3",
Daypart == "2 PM - before 5 PM"        ~ "4",
Daypart == "5 PM - before 9 PM"        ~ "5",
Daypart == "9 PM or later"             ~ "6",
TRUE                                   ~ Daypart
))
DayPart <- DayPart %>%
mutate(Daypart = case_when(
Daypart == "Before 9 AM"               ~ "05:00–08:59",
Daypart == "9 AM - before 11 AM"       ~ "09:00–10:59",
Daypart == "11 AM - before 2 PM"       ~ "11:00–13:59",
Daypart == "2 PM - before 5 PM"        ~ "14:00–16:59",
Daypart == "5 PM - before 9 PM"        ~ "17:00–20:59",
Daypart == "9 PM or later"             ~ "21:00–23:59",
TRUE                                   ~ Daypart
))
DayPart %>%
mutate(is_na = is.na(Daypart)) %>%
group_by(ID) %>%
summarise(
count_na = sum(is_na),
count_id = n()) %>%
filter(count_na > 0)                #Give condition count_na >0)
DayPart %>%
mutate(is_na = is.na(Daypart)) %>%
group_by(ID) %>%
summarise(
count_na = sum(is_na),
count_id = n()) %>%
filter(count_na > 0 & count_na == count_id) #Condition count_na equal to total appearances of an ID
DayPart <- DayPart %>%
filter(!is.na(Daypart))
#Check median of each Daypart
DayPart %>%
group_by(Daypart) %>%
summarise(
Median = median(`Visit#Daypart`, na.rm = TRUE)
)
#Impute the NA Visit#Daypart by Daypart median
DayPart <- DayPart %>%
mutate(is_na = is.na(`Visit#Daypart`)) %>%
group_by(Daypart) %>%
mutate(`Visit#Daypart` = if_else(
is.na(`Visit#Daypart`),
median(`Visit#Daypart`, na.rm = TRUE),
`Visit#Daypart`
)) %>%
ungroup()
lapply(DayPart[c("Daypart","DayPartNumericCode","Visit#Daypart")], unique)
skim(DayPart)
#View data
NeedstateDayDaypart
glimpse(NeedstateDayDaypart)
skim(NeedstateDayDaypart)
lapply(NeedstateDayDaypart[c("Year","City","Needstates","NeedstateGroup","Day#Daypart")], unique)
NeedstateDayDaypart <- NeedstateDayDaypart %>%
mutate(`Day#Daypart` = case_when(
`Day#Daypart` == "Before 9 AM"               ~ "05:00–08:59",
`Day#Daypart` == "9 AM - before 11 AM"       ~ "09:00–10:59",
`Day#Daypart` == "11 AM - before 2 PM"       ~ "11:00–13:59",
`Day#Daypart` == "2 PM - before 5 PM"        ~ "14:00–16:59",
`Day#Daypart` == "5 PM - before 9 PM"        ~ "17:00–20:59",
`Day#Daypart` == "9 PM or later"             ~ "21:00–23:59",
TRUE                                         ~ `Day#Daypart`
))
lapply(NeedstateDayDaypart[c("Day#Daypart")], unique)
#View data
SA_var
glimpse(SA_var)
skim(SA_var)
lapply(SA_var[c("Year","Group_size","Age","MPI#Mean","MPI_Mean_Use")], unique)
lapply(SA_var[c("City","TOM","BUMO","BUMO_Previous","MostFavourite","Gender","MPI#detail","Age#group","Age#Group#2","MPI","MPI#2","Occupation","Occupation#group")], unique)
lapply(SA_var[c("TOM","BUMO","BUMO_Previous","MostFavourite")],unique)
SA_var <-SA_var %>%
mutate(`MPI#detail` = case_when(
str_detect(`MPI#detail`, "Under\\s+3") ~ "< 3M",
`MPI#detail` == "Refuse"               ~ "Refuse",
is.na(`MPI#detail`)                    ~ NA,
TRUE ~ str_extract_all(`MPI#detail`, "\\d+\\.?\\d*") %>%
lapply(function(x) paste0(x[1], "M – ", x[2], "M")) %>%
unlist()
))
SA_var <- SA_var %>%
mutate(MPI = case_when(
MPI == "VND 25m+"             ~ "> 25M",
MPI == "Under VND 4.5m"       ~ "< 4.5M",
is.na(MPI)                    ~ NA,
TRUE                          ~ str_extract_all(MPI, "\\d+\\.?\\d*") %>%
lapply(function(x) paste0(x[1], "M – ", x[2], "M")) %>%
unlist()
))
SA_var <- SA_var %>%
mutate(`MPI#2` = case_when(
is.na(`MPI#2`) ~ NA,
TRUE ~ str_extract(`MPI#2`, "^\\d+")
))
SA_var <- SA_var %>%
mutate(Occupation = str_remove(Occupation, "\\s*\\([^\\)]+\\)"))
SA_var <- SA_var %>%
mutate(`Age#Group#2` = case_when(
`Age#Group#2` == "45+ y.o."             ~ "> 45",
is.na(`Age#Group#2`)                    ~ NA,
TRUE                          ~ str_extract_all(`Age#Group#2`, "\\d+") %>%
lapply(function(x) paste0(x[1], " – ", x[2])) %>%
unlist()
))
SA_var <-SA_var %>%
select(-Col)
SA_var <- SA_var %>%
mutate(`MPI#detail` = case_when(
`MPI#detail` == "Refuse" ~ NA,
TRUE                     ~ `MPI#detail`
))
SA_var <- SA_var %>%
kNN(variable = c("MPI#detail", "Age","Group_size"),
k = 9)
SA_var <- SA_var %>%
mutate(MPI = case_when(
`MPI#detail` %in% c("< 3M","3M – 4.49M") ~ "< 4.5M",
`MPI#detail` %in% c("4.5M – 6.49M","6.5M – 7.49M","7.5M – 8.99M") ~ "4.5M – 8.9M",
`MPI#detail` %in% c("9M – 11.99M","12M – 14.99M") ~ "9M – 14.9M",
`MPI#detail` %in% c("20M – 24.99M","15M – 19.99M") ~ "15M – 24.9M",
`MPI#detail` %in% c("25M – 29.99M","30M – 44.99M","45M – 74.99M","75M – 149.99M") ~ "> 25M"
),
`MPI#2` = case_when(
MPI == "< 4.5M" ~ "1",
MPI == "4.5M – 8.9M" ~ "2",
MPI == "9M – 14.9M" ~ "3",
MPI == "15M – 24.9M" ~ "4",
MPI == "> 25M" ~ "5"
))
SA_var <- SA_var %>%
mutate(`MPI#Mean` = str_extract_all(`MPI#detail`, "\\d+\\.?\\d*") %>%
lapply(function(x) {
mean_val <- mean(as.numeric(x)) * 1000
# Round to nearest 10 and subtract 1 to end in 9 (e.g., 5499)
ceiling(mean_val / 10) * 10 - 1
}) %>%
unlist()
) %>%
mutate(`MPI#Mean` = case_when(
`MPI#Mean` == 2999 ~ 1499,
TRUE ~ `MPI#Mean`
))
SA_var <- SA_var %>%
mutate(MPI_Mean_Use = `MPI#Mean`)
SA_var <- SA_var %>%
mutate(`Age#group` = case_when(
Age >= 16 & Age <= 19                 ~ "16 - 19",
Age >= 20 & Age <= 29                 ~ "20 - 29",
Age >= 30 & Age <= 39                 ~ "30 - 39",
Age >= 40 & Age <= 60                 ~ "40 - 60",
),
`Age#Group#2` = case_when(
Age >= 16 & Age <= 19                 ~ "16 - 19",
Age >= 20 & Age <= 24                 ~ "20 - 24",
Age >= 25 & Age <= 29                 ~ "25 - 29",
Age >= 30 & Age <= 34                 ~ "30 - 34",
Age >= 35 & Age <= 39                 ~ "35 - 39",
Age >= 40 & Age <= 44                 ~ "40 - 44",
Age >= 45                             ~ "> 45"
))
lapply(SA_var[c("MPI#detail","MPI","MPI#2","Occupation","Age","Age#group","Age#Group#2","MPI#Mean","MPI_Mean_Use")],unique)
skim(SA_var)
View(SA_var)
write.csv(Segmentation2017, "Segmentation2017.csv", row.names = FALSE)
write.csv(Brand_Image, "Brand_Image.csv", row.names = FALSE)
write.csv(Brand_Health, "Brand_Health.csv", row.names = FALSE)
write.csv(Companion, "Companion.csv", row.names = FALSE)
write.csv(Competitor_Database, "Competitor_Database.csv", row.names = FALSE)
write.csv(DayofWeek, "DayofWeek.csv", row.names = FALSE)
write.csv(DayPart, "DayPart.csv", row.names = FALSE)
write.csv(NeedstateDayDaypart, "NeedstateDayDaypart.csv", row.names = FALSE)
write.csv(SA_var, "SA_var.csv", row.names = FALSE)
save.image("C:/Users/TRUONG/Downloads/My Courses/BI9/.RData")
source("C:/Users/TRUONG/Downloads/My Courses/BI9/Export File Script.R")
source("C:/Users/TRUONG/Downloads/My Courses/BI9/Export File Script.R")
